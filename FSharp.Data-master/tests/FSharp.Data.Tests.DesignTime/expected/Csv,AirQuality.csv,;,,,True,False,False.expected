class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : () -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "AirQuality.csv")), ";", '"', true, false, false)

    static member AsyncGetSample: () -> CsvProvider async
    CsvFile<_>.AsyncCreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                          let value = TextConversions.AsString(row.[0])
                                                          TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                          let value = TextConversions.AsString(row.[1])
                                                          TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                          let value = TextConversions.AsString(row.[2])
                                                          TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                          let value = TextConversions.AsString(row.[3])
                                                          TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                          let value = TextConversions.AsString(row.[4])
                                                          TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                          let value = TextConversions.AsString(row.[5])
                                                          TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                                  [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                     TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                     TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), (IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "AirQuality.csv"), ";", '"', true, false, false)

    static member AsyncLoad: uri:string -> CsvProvider async
    CsvFile<_>.AsyncCreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                          let value = TextConversions.AsString(row.[0])
                                                          TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                          let value = TextConversions.AsString(row.[1])
                                                          TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                          let value = TextConversions.AsString(row.[2])
                                                          TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                          let value = TextConversions.AsString(row.[3])
                                                          TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                          let value = TextConversions.AsString(row.[4])
                                                          TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                          let value = TextConversions.AsString(row.[5])
                                                          TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                                  [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                     TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                     TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                     TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), (IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), ";", '"', true, false, false)

    static member GetSample: () -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "AirQuality.csv")), ";", '"', true, false, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), ((new StreamReader(stream)) :> TextReader), ";", '"', true, false, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), reader, ";", '"', true, false, false)

    static member Load: uri:string -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), ";", '"', true, false, false)

    static member Parse: text:string -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     let value = TextConversions.AsString(row.[0])
                                                     TextRuntime.GetNonOptionalValue("Ozone", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[1])
                                                     TextRuntime.GetNonOptionalValue("Solar.R", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                                     let value = TextConversions.AsString(row.[2])
                                                     TextRuntime.GetNonOptionalValue("Wind", TextRuntime.ConvertDecimal("", value), value),
                                                     let value = TextConversions.AsString(row.[3])
                                                     TextRuntime.GetNonOptionalValue("Temp", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[4])
                                                     TextRuntime.GetNonOptionalValue("Month", TextRuntime.ConvertInteger("", value), value),
                                                     let value = TextConversions.AsString(row.[5])
                                                     TextRuntime.GetNonOptionalValue("Day", TextRuntime.ConvertInteger("", value), value)), new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                                                                                                             [| TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let t1,_,_,_,_,_ = row in t1)))
                                                                                                                                                                TextRuntime.ConvertFloatBack("", "NaN,NA,#N/A,:", TextRuntime.GetOptionalValue((let _,t2,_,_,_,_ = row in t2)))
                                                                                                                                                                TextRuntime.ConvertDecimalBack("", TextRuntime.GetOptionalValue((let _,_,t3,_,_,_ = row in t3)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,t4,_,_ = row in t4)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,t5,_ = row in t5)))
                                                                                                                                                                TextRuntime.ConvertIntegerBack("", TextRuntime.GetOptionalValue((let _,_,_,_,_,t6 = row in t6))) |]), ((new StringReader(text)) :> TextReader), ";", '"', true, false, false)


class CsvProvider+Row : float * float * decimal * int * int * int
    member Day: int with get
    (let _,_,_,_,_,t6 = this in t6)

    member Month: int with get
    (let _,_,_,_,t5,_ = this in t5)

    member Ozone: float with get
    (let t1,_,_,_,_,_ = this in t1)

    member Solar.R: float with get
    (let _,t2,_,_,_,_ = this in t2)

    member Temp: int with get
    (let _,_,_,t4,_,_ = this in t4)

    member Wind: decimal with get
    (let _,_,t3,_,_,_ = this in t3)


