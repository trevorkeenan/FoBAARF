class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+DomainTypes+Entity async
    JsonDocument.AsyncCreate((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Dates.json"), "")

    static member AsyncLoad: uri:string -> JsonProvider+DomainTypes+Entity async
    JsonDocument.AsyncCreate((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), "")

    static member GetSample: () -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Dates.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), "")

    static member Parse: text:string -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+DomainTypes

class JsonProvider+DomainTypes+Entity : FDR.JsonDocument
    member Anniversary: System.DateTime with get
    let value = (this.JsonValue.TryGetProperty "anniversary")
    JsonRuntime.GetNonOptionalValue("anniversary", JsonRuntime.ConvertDateTime("", value), value)

    member Birthdate: System.DateTime with get
    let value = (this.JsonValue.TryGetProperty "birthdate")
    JsonRuntime.GetNonOptionalValue("birthdate", JsonRuntime.ConvertDateTime("", value), value)

    member NoTimeZone: System.DateTime with get
    let value = (this.JsonValue.TryGetProperty "NoTimeZone")
    JsonRuntime.GetNonOptionalValue("NoTimeZone", JsonRuntime.ConvertDateTime("", value), value)

    member UtcTime: System.DateTime with get
    let value = (this.JsonValue.TryGetProperty "UtcTime")
    JsonRuntime.GetNonOptionalValue("UtcTime", JsonRuntime.ConvertDateTime("", value), value)


